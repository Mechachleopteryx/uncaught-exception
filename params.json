{"name":"Uncaught-exception","tagline":"Handle uncaught exceptions.","body":"# uncaught-exception\r\n\r\nHandle uncaught exceptions.\r\n\r\nSupports 0.10 only. Designed for robustness and garaunteed\r\n    eventual termination of the process.\r\n\r\n## Example\r\n\r\n```js\r\nvar uncaughtHandler = require('uncaught-exception');\r\n\r\nvar myLogger = {\r\n    fatal: function (message, metaObj, callback) {\r\n        // must call the callback once logged\r\n    }\r\n}\r\n\r\nvar onError = uncaughtHandler({\r\n    logger: myLogger,\r\n    prefix: 'some string prefix ',\r\n    backupFile: '/path/to/uncaught-handler.log',\r\n    gracefulShutdown: function (callback) {\r\n        // perform some graceful shutdown here.\r\n\r\n        // for example synchronize state of your app to redis\r\n        // for example communicate to master process in cluster\r\n        // and ask for a new worker to be started\r\n\r\n        // must call callback once gracefully shutdown\r\n        // after you call the callback the process will shutdown\r\n    }\r\n})\r\n\r\nprocess.on('uncaughtException', onError)\r\n```\r\n\r\n## Docs\r\n\r\n### Type definitions\r\n\r\nSee [docs.mli for type definitions](docs.mli)\r\n\r\n### `var onError = uncaughtHandler(options)`\r\n\r\n```\r\nuncaught-exception/uncaught := (options: {\r\n    logger: {\r\n        fatal: (String, Object, Callback) => void\r\n    },\r\n    prefix?: String,\r\n    backupFile?: String,\r\n    loggerTimeout?: Number,\r\n    shutdownTimeout?: Number,\r\n    gracefulShutdown?: (Callback) => void,\r\n    preAbort?: () => void\r\n}) => onError: (Error) => void\r\n```\r\n\r\n`uncaughtHandler` takes an options object and returns an error\r\n  handling function that can be passed to `'uncaughtException'`\r\n  listener of the `process`.\r\n\r\nYou must pass the `uncaughtHandler` a `logger` with a `fatal()`\r\n  method.\r\n\r\nThe `uncaughtHandler` will exit your process once it's done\r\n  logging the error.\r\n\r\n#### `options.logger`\r\n\r\n`options.logger` is a logger object used to log the exception.\r\n  It's expected to have a `fatal()` method that takes a string,\r\n  an error object and a callback.\r\n\r\nThe `logger` should invoke the `callback` once it's flushed it to\r\n  all the logging backends you support, (i.e. disk, sentry, etc)\r\n\r\n#### `options.prefix`\r\n\r\n`options.prefix` allows you to configure a prefix for this\r\n  uncaught handler. You might want to put the `os.hostname()` in\r\n  the prefix.\r\n\r\n#### `options.backupFile`\r\n\r\n`options.backupFile` is a filePath that will be appended to\r\n  synchronously incase anything goes wrong inside the uncaught\r\n  exception handler.\r\n\r\nIt's highly recommended you pass a backup file path in case your\r\n  logger fails.\r\n\r\nInspecting the `backupFile` and looking at the core dump will\r\n  give you a deep insight into exactly what happened at the\r\n  end of your node process.\r\n\r\n#### `options.loggerTimeout`\r\n\r\nThe `uncaughtHandler` will assume that your logger might fail or\r\n  hang so it times out the fatal logging call.\r\n\r\nThe default timeout is 30 seconds, you can pass `loggerTimeout`\r\n  if you want to overwrite it.\r\n\r\n#### `options.gracefulShutdown`\r\n\r\nThe `uncaught-exception` module supports doing a graceful\r\n  shutdown. Normally when an uncaught exception happens you\r\n  want to close any servers that are open and wait for all\r\n  sockets to exit cleanly.\r\n\r\nIdeally you want to empty the event loop and do a full graceful\r\n  shutdown.\r\n\r\nYou may also want to communicate to the master process if you are\r\n  running under `cluster`.\r\n\r\nFor more information on proper error handling see the\r\n  [node domain documentation](http://nodejs.org/api/domain.html#domain_warning_don_t_ignore_errors)\r\n\r\n#### `options.shutdownTimeout`\r\n\r\nThe `uncaughtHandler` will assume that your gracefulShutdown\r\n  might fail or hang so it times out the graceful shutdown call.\r\n\r\nThe default timeout is 30 seconds, you can pass `shutdownTimeout`\r\n  if you want to overwrite it.\r\n\r\n#### `options.preAbort`\r\n\r\nYou can specify your own `preAbort` handler that **MUST** be\r\n  a synchronous function.\r\n\r\nThe main use case is to invoke your own exit strategy instead of\r\n  the default exit strategy which is calling `process.abort()`\r\n\r\nFor example you may want to `process.exit(1)` here instead.\r\n\r\n## Installation\r\n\r\n`npm install uncaught-exception`\r\n\r\n## tests\r\n\r\n`npm test`\r\n\r\n## Contributors\r\n\r\n - Raynos\r\n - dfellis\r\n - squamos\r\n\r\n## MIT Licenced\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}